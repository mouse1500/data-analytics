# -*- coding: utf-8 -*-
"""Анализ EDA Березин И.А.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C78xC-ZWmp43I3T9PkxY_fE9wfUCOkIF

1. Первое что нам необходимо сделать, это узнать размеры нашего датасета, какие он имеет колонки, 
в каком формате они представленны (числовой или строковый), определиться какие колонки нам интересны. 

2. Для анализа нам понядобятся 4 колонк: name, salary, key_skills, specializations.
Колонку name мы представим в виде диаграммы, это нужно для наглядного понимания колличественного соотношения вакансий.

Колонка salary, покажет нам что стоит ожидать по зарплате от минимальных до максимальных значений, без учета рабочего стажа.

Основой всего будет колонка specializations, т.к. она позволит отобрать вакансии по разработке, программированию. И исходя из этихъ данных высчитывать все остальные показатели.

Ну а колонка key_skills, покажет какие ключевые навыки должны будут приобрести наши студенты.

3. На этом этапе делаем графики и сторим зависимости опыта работы, названия вакансии и зарплаты.

Так же сделаем проверку колонки зарплат, после этого укажем среднюю, максимальную и минимальную зарплату.

Укажем диаграмму распределения професий по количеству вакансий, будут показанные топ-10 вакансий.
"""

import pandas as pd
import re
import matplotlib.pyplot as plt
import numpy as np
import json
import seaborn as sns


df = pd.read_excel('/content/region roles (26.05.22).xlsx')

'''Формат и типы данных '''
df.shape  # узнаем сколько строк в массиве и колонок

df.dtypes # узнаем тип данных

'''Отбор числовых данных'''
df_numeric = df.select_dtypes(include=[np.number])
numeric_cols = df_numeric.columns.values
numeric_cols # по результату видно что цифровые форматы имеют только две колноки

'''Отбор строковых данных'''
df_non_numeric = df.select_dtypes(exclude=[np.number])
non_numeric_cols = df_non_numeric.columns.values
non_numeric_cols # получили список из 48 строковых колонок

'''Обнаружение пропущенных данных. Затем удаляем полностью пустые столбцы и строки со значением nan которые нам не интересны.'''
# Проверка пустых данных
df.isnull().sum()

df.drop(['Unnamed: 0', 'id', 'premium', 'department', 'has_test', 'response_letter_required', 'area', 'type', 'published_at', 'created_at', 'archived', 'insider_interview', 'url', 'alternate_url', 'relations', 'employer',	'snippet', 'schedule', 'working_days', 'working_time_intervals', 'working_time_modes', 'accept_temporary','description', 'region', 'address', 'response_url', 'sort_point_distance', 'contacts', 'immediate_redirect_url'], inplace=True, axis=1)

df.head()

# Удаляем пустые списки из колонки 'key_skills'
del_empty_list = {
	'[]' : 0
}

df['key_skills'] = df['key_skills'].map(del_empty_list).fillna(df['key_skills']) # Сделали удаление пустых списков, заменив их на 0 и затем исключили из исследования
df = df.loc[df['key_skills'] != 0]

'''Преобразуем данные из колонок salary, key_skills, specializations и experience'''

# Отчистка столбца с опытом работы
df['experience'][1].replace("{", '').replace("}", '').split(',')
df['experience'][1].replace("{", '').replace("}", '').split(',')[-1][9:]
df['experience'][1].replace("'", ' ').replace("'",' ')[-1][9:]
def experience_from(experience):
  if pd.isna(experience): 
    clean_experience = np.nan
  else:
    clean_experience = experience.replace("{", '').replace("}", '').split(',')[-1][9:]
    if clean_experience == 'None':
    	clean_experience = np.nan
  return clean_experience
df['experience_from'] = df.experience.apply(experience_from)

# Отчистка колонки зарплат и приведение ее к числовому типу
df.salary.isna().sum()
df['salary'][4].replace("{", '').replace("}", '').split(',')
df['salary'][4].replace("{", '').replace("}", '').split(',')[0][8:]

def salary_from(salary):
  if pd.isna(salary): 
    clean_salary = np.nan
  else:
    clean_salary = salary.replace("{", '').replace("}", '').split(',')[0][8:]
    if clean_salary == 'None':
    	clean_salary = np.nan
  return clean_salary

df['salary_from'] = df.salary.apply(salary_from)
df['salary_from'] = pd.to_numeric(df['salary_from'])
df['salary_from'] = df['salary_from'].astype('Int64')

# Отчистка столбцов с ключивыми навыками и специализацией
# Добавим в функцию удаление всех двойных кавычек
def text_to_json(text):
	try:
		return json.loads(text.replace('"', '').replace("'", '"'))
	except:
		return []
df['key_skills_json'] = df['key_skills'].apply(text_to_json)
df['specializations_json'] = df['specializations'].apply(text_to_json)

# Создадим функцию по записи ключевых навыков
def return_indexed(data):
    try:
        return data[0]['name']
    except:
        return []
df['key_specialization'] = df['specializations_json'].apply(return_indexed)

# Функция по созданию списка из json файла
def get_values(json):
	try:
		out = []
		if len(json)>0:
			for i in json:
				out.append(i['name'])
		return out
	except:
		return []
df['key_skills_list'] = df['key_skills_json'].apply(get_values)

df.drop(labels = ['experience', 'salary', 'key_skills', 'specializations', 'key_skills_json', 'specializations_json'], axis = 1, inplace=True)

df['salary_from'].dropna(inplace = True)

# Функция по поиску инересующих нас навыкам и стажу работы.
def it_specialists(spec):
	return 'Программирование, Разработка' in spec

filter = df['key_specialization'].apply(it_specialists)
df = df[filter]
df = df.dropna()

'''Делаем фильтрацию по ключевым критерям, в результате получаем список с интересующими нас вакансиями, 
так же приводим вакансии к одному виду для более качественного отбора.'''
rep = {
	'Разработчик 1C' : '1С Программист',
	'Программист 1С (удаленная работа)' : '1С Программист',
	'Ведущий разработчик 1С' : '1С Программист',
	'Ведущий программист 1С' : '1С Программист',
	'Специалист 1С' : '1С Программист',
	'Программист 1С' : '1С Программист',
	'Программист 1 С' : '1С Программист',
	'Программист 1C' : '1С Программист',
	'Программист-стажер 1С' : '1С Программист',
	'Программист-стажер 1C' : '1С Программист',
	'Разработчик 1С' : '1С Программист',
	'Консультант 1С' : '1С Программист',
	'Программист 1C 8' : '1С Программист',
	'Программист 1С (удаленно)' : '1С Программист',
	'Разработчик 1С (senior) ' : '1С Программист',
	'Программист-разработчик 1С' : '1С Программист',
	'Программист 1с' : '1С Программист',
	'Программист-консультант 1C' : '1С Программист',
	'Программист-консультант 1С' : '1С Программист',
	'Инженер-программист 1 категории' : '1С Программист',
	'Инженер-программист 1С' : '1С Программист',
	'Стажер-программист 1С' : '1С Программист',
	'1С программист' : '1С Программист', 
	'Консультант 1C' : '1С Программист',
	'Программист 1С ERP' : '1С Программист',
	'Ведущий программист 1C' : '1С Программист',
	'Программист 1С (стажер)' : '1С Программист',
	'Python разработчик' : 'Python Программист',
	'Middle/Senior/Lead Python-разработчик' : 'Python Программист', 
	'Python Developer' : 'Python Программист',
	'Программист Python' : 'Python Программист',
	'Python-разработчик' : 'Python Программист',
	'Разработчик Python' : 'Python Программист',
	'Python developer' : 'Python Программист',
	'Программист C#' : 'С# Программист',
	'Разработчик C#' : 'С# Программист',
	'Программист С#' : 'С# Программист',
	'C# разработчик' :  'С# Программист',
	'Инженер-программист С#' : 'С# Программист',
	'PHP-программист' : 'PHP Программист',
	'PHP-разработчик' : 'PHP Программист',
	'PHP разработчик' : 'PHP Программист',
	'PHP программист' : 'PHP Программист',
	'PHP Developer' : 'PHP Программист',
	'Middle PHP разработчик (middle backend php developer)' : 'PHP Программист',
	'Программист PHP' : 'PHP Программист',
	'Frontend разработчик' : 'Frontend разработчик',
	'Frontend-разработчик (React)' : 'Frontend разработчик',
	'Frontend developer' : 'Frontend разработчик',
	'Front-end разработчик' : 'Frontend разработчик',
	'Frontend Developer' : 'Frontend разработчик',
	'Frontend-разработчик' : 'Frontend разработчик',
	'Веб-программист' : 'Web разработчик',
	'Веб-разработчик' : 'Web разработчик',
	'Web-программист' : 'Web разработчик',
	'Web-разработчик' : 'Web разработчик',
	'Backend разработчик' : 'Backend разработчик',
	'Back-end разработчик' : 'Backend разработчик',
	'Backend developer' : 'Backend разработчик',
	'Backend-разработчик' : 'Backend разработчик',
	'Java разработчик' : 'Java Программист',
	'Программист Java' : 'Java Программист',
	'Java-разработчик' : 'Java Программист',
	'Java Developer' : 'Java Программист',
	'Java developer' : 'Java Программист',
	'Java developer (OPS platform)' : 'Java Программист',
	'IOS Developer': 'Разработчик мобильных приложений IOS/Android',
	'IOS developer' : 'Разработчик мобильных приложений IOS/Android',
	'IOS разработчик' : 'Разработчик мобильных приложений IOS/Android',
	'IOS - разработчик' : 'Разработчик мобильных приложений IOS/Android',
	'Android developer' : 'Разработчик мобильных приложений IOS/Android',
	'Android разработчик' : 'Разработчик мобильных приложений IOS/Android',
	'Android-разработчик' : 'Разработчик мобильных приложений IOS/Android',
	'Android developer (Kotlin)' : 'Разработчик мобильных приложений IOS/Android',
	'Разработчик мобильных приложений' : 'Разработчик мобильных приложений IOS/Android',
	'Android Developer' : 'Разработчик мобильных приложений IOS/Android',
	'Руководитель IT проектов' : 'Управляющий IT проектами',
	'Менеджер по проектам' : 'Управляющий IT проектами',                      
	'Менеджер IT-проектов' : 'Управляющий IT проектами',
	'Координатор проектов' : 'Управляющий IT проектами',
	'Менеджер интернет-проектов' : 'Управляющий IT проектами',
	'Project manager' : 'Управляющий IT проектами',
	'Администратор проектов' : 'Управляющий IT проектами',
	'Администратор проекта' : 'Управляющий IT проектами',
	'Project Manager' : 'Управляющий IT проектами',
	'Проектный менеджер' : 'Управляющий IT проектами',
	'Руководитель проектов' : 'Управляющий IT проектами',
	'Менеджер проекта' : 'Управляющий IT проектами',
	'Менеджер проектов' : 'Управляющий IT проектами',
	'Руководитель проекта' : 'Управляющий IT проектами',
	'Координатор проекта' : 'Управляющий IT проектами',
	'Менеджер проектов / Project Manager' : 'Управляющий IT проектами',
	'DevOps engineer' : 'DevOps разработчик',
	'DevOps Engineer' : 'DevOps разработчик',
	'Инженер-программист' : 'Программист',
	'Ведущий инженер-программист' : 'Программист',
	'Техник-программист' : 'Программист',

}

# Произвели названия интересующих нас вакансий к одному виду
df['name'] = df['name'].map(rep).fillna(df['name']) 
df['name'].value_counts()[:10]

# Смотрим средние, максимальные и минимальные зарплатные ожидания по всему списку вакансий
df = df.loc[df['salary_from']> 15279]
df = df.loc[df['salary_from']< 1000000]

average_salary = df['salary_from'].describe()
average_salary.astype(int)

# Боксплот по данным о зарплате
salary_numbers = df['salary_from'].value_counts()
sns.boxplot(y=salary_numbers.index, data = df, palette="flare")
plt.xlim(-1, 1)
plt.title('BoxPlot по заработной плате',fontweight="bold",fontsize=15)
plt.ylabel('Зарплата(Руб)')
plt.ylim(0, 650000)
plt.show()

# Данные о зарплате и колличеству профессий 
salar = df['salary_from']

sns.histplot(data=salar, x=df['salary_from'], kde=True, palette='flary')
plt.xticks(rotation=30)
plt.ylabel('Кол-во вакансий')
plt.title('Количество вакансий в кореляции с зарплатой',fontweight="bold",fontsize=15)
plt.xlabel('Заработная плата')
plt.grid(axis='y', alpha=0.75)
plt.xlim(15000, 200000)

'''Данная диаграмма отражает количество востребованных вакансий на момент сбора информации.'''
type_counts = df['name'].value_counts()
type_counts = type_counts[type_counts>34]

plt.ylabel('Количество профессий')
plt.xlabel('Диаграмма распределения профессий')
plt.xticks(rotation=20, ha='right')
plt.bar(type_counts.index, type_counts.values)
plt.show()

'''Узнаем самые востребованные навыки'''
skill = df['key_skills_list'].explode().value_counts()
# sns.set_theme(style="white", context="talk")
sns.set_theme(style="darkgrid", palette="rocket")
f, ax1 = plt.subplots(1, figsize=(7, 5), sharex=True)
x = skill.index[:15]
y1 = skill[:15]


sns.barplot(y=x, x=y1, palette="rocket")
plt.title('ТОП-15 навыков из датасета',fontweight="bold",fontsize=15)
plt.xticks(rotation= 90)
plt.setp(f.axes, xticks=[])

proff_types = df['name'].unique()[:10]
proff_types

for proffi in proff_types:
  datset = df[df['name']==proffi]
  class_counts = datset['key_skills_list'].explode().value_counts()
  labels = class_counts.index[:9]
  plt.figure(figsize=(7, 7))
  plt.title(f'{proffi} и его навыки',fontweight="bold",fontsize=15)
  plt.pie(class_counts.values[:9], labels = labels,autopct='%.0f%%', textprops=
        {'fontsize':12, 'color':'#f7f9fa'})
  patches, texts = plt.pie(
    class_counts.values[:9], 
    labels = labels
    )
  plt.legend(patches, labels, title="Навыки профессии", loc="upper center",
             bbox_to_anchor=(1, 0, 1, 1)) 
plt.show()

"""Исходя из данных графиков можно сделать вывод, что на данный момент самый востребованный специалист это: Программист в 1С, с такими навыками как Git, SQL, PostgreSQL. 

Что касается зарплат то видно что средняя зарплата  105628 рублей, максимальная достигает 600000 рублей.
"""

