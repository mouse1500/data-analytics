# -*- coding: utf-8 -*-
"""Статистический анализ Березин И.А.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HSVvUriYz7Q_iDoBEuqilDz2GxPdhjuN
"""

import pandas as pd
import re
import matplotlib.pyplot as plt
import numpy as np
import json
import seaborn as sns
import sklearn.linear_model as lm
import statsmodels.formula.api as smf
import statsmodels.api as sm
import scipy
import scipy.stats as stats

df = pd.read_excel('/content/region roles.xlsx')

# Теперь узнаем в каких столбцах мы имеем пропуски и их количество.
df.isnull().sum()

"""В результате проверки имеем колонки с большим числом пропусков department, address, response_url, sort_point_distance, insider_interview, contacts, immediate_redirect_url и salary, в колонке salary
число пропусков сократиться после фильтрации вакансий и удаления всех оставшихся пропусков, данную колонку удалить не можем, т.к. в ней  имеется интересующая нас величина заработной платы.
Пропуски уберем после фильтрации данных по интересующим нас вакансиям.
"""

# Так же сразу удаляем колонки которые не несут для нашего исследования ни какой  полезной информации.
df.drop(['Unnamed: 0', 'id', 'premium', 'department', 'has_test', 'response_letter_required', 'area', 'type',
	'published_at', 'created_at', 'archived', 'insider_interview', 'url', 'alternate_url', 'relations',
	'snippet', 'schedule', 'working_days', 'working_time_intervals', 'working_time_modes', 'accept_temporary',
	'description', 'address', 'response_url', 'sort_point_distance', 'contacts', 'immediate_redirect_url', 'employer'], axis=1, inplace=True)

# Проверяем что получили после удаления колонок
df.info()

"""Нужно убрать пропуски в селари, сделать разделение по опыту работы, отчистить колонку експириенс и разбить ее по опыту, выделить ключевую специализацию, проверить зависит ли 
спрос на работников от региона, проверить зависит ли зарплата от региона, проверить зависит ли зарплата от опыта.

"""

# Делаем распаковку списка со словарем и переводим все в удобный формат для работы
def data_cleaning(text):
	try:
		return json.loads(text.replace('"', '').replace("'", '"'))
	except:
		return []
df['new_specializations'] = df['specializations'].apply(data_cleaning)
df['key_skills_json'] = df['key_skills'].apply(data_cleaning)

def get_values(json):
	try:
		out = []
		if len(json)>0:
			for i in json:
				out.append(i['name'])
		return out
	except:
		return []
df['key_skills'] = df['key_skills_json'].apply(get_values)
df.drop(['key_skills_json'], axis=1, inplace=True)

def return_index(data):
	try:
		return data[0]['name']
	except:
		return[]
df['specializations'] = df['new_specializations'].apply(return_index)
df.drop(['new_specializations'], axis=1, inplace=True)

# Отчистка столбца с опытом работы
df['experience'][1].replace("{", '').replace("}", '').split(',')
df['experience'][1].replace("{", '').replace("}", '').split(',')[-1][9:]
df['experience'][1].replace("'", ' ').replace("'",' ')[-1][9:]

def experience_from(experience):
  if pd.isna(experience): 
    clean_experience = np.nan
  else:
    clean_experience = experience.replace("{", '').replace("}", '').split(',')[-1][9:]
    if clean_experience == 'None':
    	clean_experience = np.nan
  return clean_experience
df['experience'] = df.experience.apply(experience_from)

# Делаем отбор вакансий по специализации Программирование, Разработка это позволит сократить количество вакансий, т.к. нам нужны вакансии связанные с IT сферой, а не с продажами, сферой услуг и т.д.
def dev(data):
	return 'Программирование, Разработка' in data

filter = df['specializations'].apply(dev)
df = df[filter]

# Затем чистим колнку с зарплатой, оставим только минимальную зарплату.
df.salary.isna().sum()
df['salary'][1].replace("{", '').replace("}", '').split(',')
df['salary'][1].replace("{", '').replace("}", '').split(',')[0][8:]

def clear_salary(salary):
	if pd.isna(salary):
		clean_salary = np.nan
	else:
		clean_salary = salary.replace("{", '').replace("}", '').split(',')[0][8:]
		if clean_salary == 'None':
			clean_salary = np.nan
	return clean_salary

df['min_salary'] = df.salary.apply(clear_salary)
df['salary'] = pd.to_numeric(df['min_salary'])

# Удаляем все пропуски в таблице. 
df = df.dropna(axis=0, how='any')

# Приводим колонку зарплат к числовому типу 
df['salary'] = df['salary'].astype('Int64')
df['salary']
df.drop(['min_salary'], axis=1, inplace=True)

# Датасет готов для проведения статистического анализа
# Проверяем колнки на тип данных
df.info()

"""Типы данных для дата сета:

name(наименование вакансий) - категориальный тип

salary(заработная плата) - количественный тип

experience(опыт работы) - категориальный тип

key_skills(ключевые навыки) - категориальный тип

specializations(специализация) - категориальный тип

region(регион в котором размещена вакансия) - категориальный тип

Делаем разбивку по опыту работы. Это потребуется для сравнения уровня зарплат к определенному уровню работы. Что бы наглядно показать как может расти зарплата у специалиста, а это нужно для того что бы сделать курсы для людей с разным уровнем подготовки и мотивировать их на развтие в профессии.
"""

# Вакансии без опыта работы
def it_experience_zero(exp):
  return 'Нет опыта' in exp

filter = df['experience'].apply(it_experience_zero)
zero_df = df[filter]
zero_df['name'].value_counts()[:10] # Просмотр топ-10 вакансий

# Вакансии с опытом от 1 до 3х лет
def it_experience_up_to_three_years(exp):
	return 'От 1 года до 3 лет' in exp

filter = df['experience'].apply(it_experience_up_to_three_years)
three_years_df = df[filter]
three_years_df['name'].value_counts()[:10] # Просмотр топ-10 вакансий

# Вакансии от 3х до 6 лет
def three_to_six(exp):
	return 'От 3 до 6 лет' in exp

filter = df['experience'].apply(three_to_six)
three_to_six_df = df[filter]
three_to_six_df['name'].value_counts()[:10] # Просмотр топ-10 вакансий

# Вакансии свыше 6 лет
def over_six_years(exp):
	return 'Более 6 лет' in exp

filter = df['experience'].apply(over_six_years)
over_six_years_df = df[filter]
over_six_years_df['name'].value_counts()[:10] # Просмотр топ-10 вакансий

"""Строим графики по уровню зп и опыту работы кандидатов и график распределения вакансий по регионам.

Нулевая гипотеза Н0 - уровень зарплаты не изменяется с опытом работы.
"""

# График по уровню зарплаты при стаже работы без опыта
zero_df['salary'].hist(bins=15)
plt.title('Зп по стажу без опыта работы')
plt.ylabel('Количество вакансий', fontsize=15)
plt.xlabel('Зарплата', fontsize=15)
plt.show()

stats.shapiro(zero_df['salary'])

"""Т.к. pvalue больше 0.05, то Н0 отклоняется"""

# График по уровню зарплаты при стаже работы от 1 до 3 лет
three_years_df['salary'].hist(bins=15)
plt.title('Зп по стажу от 1 до 3 лет')
plt.ylabel('Количество вакансий', fontsize=15)
plt.xlabel('Зарплата', fontsize=15)
plt.show()

stats.shapiro(three_years_df['salary'])

"""В данной группе pvalue меньше критического значения, Н0 принимается.

Из этого можно сделать вывод о том, что уровень зарплаты начинающего сотрудника близок к уровню зарплаты сотрудника с опытом работы от одного года.
"""

# График по уровню зарплаты при стаже работы от 3 до 6 лет
three_to_six_df['salary'].hist(bins=15)
plt.title('Зп по стажу от 3 до 6 лет')
plt.ylabel('Количество вакансий', fontsize=15)
plt.xlabel('Зарплата', fontsize=15)
plt.show()

stats.shapiro(three_to_six_df['salary'])

"""Т.к. pvalue больше 0.05, то Н0 отклоняется"""

# График по уровню зарплаты при стаже работы от 6 лет
over_six_years_df['salary'].hist(bins=15)
plt.title('Зп по стажу от 6 лет')
plt.ylabel('Количество вакансий', fontsize=15)
plt.xlabel('Зарплата', fontsize=15)
plt.show()

stats.shapiro(over_six_years_df['salary'])

"""Т.к. pvalue больше 0.05, то Н0 отклоняется"""

# Узнаем количество вакансий в регионах
region_vac = df['region'].value_counts()
fig = plt.figure(figsize = (10, 6))
plt.bar(region_vac.index, region_vac)
plt.title('Количество вакансий по регионам России')
plt.ylabel('Количество вакансий', fontsize=10)
plt.xlabel('Название регионов', fontsize=10)
plt.xticks(fontsize = 7, rotation = 90) # размер шрифта и угол наколна наименования вакансий
plt.axhline(y = 100, color = 'darkgreen', linewidth=1)
plt.text(x=65, y=110, s = '100 вакансий', size=15, color='red')
plt.show()

"""Данная диаграмма показывает, что с большим отрывом по вакансиям лидирует Москва.

Построим круговые диаграмму для указания вакансий в процентном соотношении друг к другу.
"""

exp_count = df['experience'].value_counts()
plt.pie(exp_count, labels=exp_count.index, autopct='%1.1f%%')
plt.title(label = 'Количество вакансий по требуемому опыу работы', fontsize = 15)
plt.show()

'''Коэффициент асиметрии и эксцесса'''
print('\nКоэффициент ассиметрии')
# Коэффициент асиметрии, у нормального распределенной выборки он равен 0 (возможны отклонения ±1)
print(zero_df['salary'].skew()) # группа без опыта работы
print(three_years_df['salary'].skew()) # группа с опытом работы от 1 года до 3 лет
print(three_to_six_df['salary'].skew()) # группа с опытом работы от 3 до 6 лет
print(over_six_years_df['salary'].skew()) # группа с опытом работы от 6 лет

print('\nКоэффициент эксцесса')
# Коэффициент эксцесса, у нормального распределенной выборки он равен 3 (возможны отклонения ±1)
print(zero_df['salary'].kurtosis()) # группа без опыта работы
print(three_years_df['salary'].kurtosis()) # группа с опытом работы от 1 года до 3 лет
print(three_to_six_df['salary'].kurtosis()) # группа с опытом работы от 3 до 6 лет
print(over_six_years_df['salary'].kurtosis()) # группа с опытом работы от 6 лет

"""Расcмотрим количественный показатель - Зарплату в предложенных вакансиях"""

sns.histplot(data=df['salary'], x=df['salary'], kde=True)
plt.xticks(rotation=30)
plt.ylabel('Кол-во вакансий')
plt.title('Количество вакансий в кореляции с зарплатой',fontweight="bold",fontsize=15)
plt.xlabel('Заработная плата')
plt.grid(axis='y', alpha=0.75)
plt.xlim(15000, 350000)

three_years_df['key_skills'].explode().value_counts()[:10]

skill = three_years_df['key_skills'].explode().value_counts()

sns.set_theme(style="darkgrid", palette="rocket")
x = skill.index[:10]
y1 = skill[:10]


sns.barplot(y=x, x=y1, palette="rocket")
plt.title('ТОП-10 навыков',fontweight="bold",fontsize=15)
plt.xticks(rotation= 0)
plt.setp(f.axes, xticks=[])

"""Зарплата является количественным типом, а навыки порядковыми, распредление обоих не нормальное,проверим на кол-во групп, их у нас > 2, зависимость у данных отсутствует, следовательно из этого мы выбираем метод Краскала-Уоллиса"""

dev_skills = [i for i in skill.index[:10]]

def skill_salary(skill):
  try:
      cnt = 0
      for i in range(len(dev_skills)):
        if dev_skills[i] in skill:
          return dev_skills[i]
  except:
    return 0

three_years_df['key_skills'] = three_years_df['key_skills'].apply(skill_salary)

comp_dict = {}
for j in range(len(dev_skills)):

  comp_dict[f'dfsk{j}'] = comp_dict.get(f'dfsk{j}', np.array(three_years_df[three_years_df['key_skills']==f'{dev_skills[j]}']['salary']))


stats.mstats.kruskalwallis(comp_dict['dfsk0'],comp_dict['dfsk1'],comp_dict['dfsk2'],comp_dict['dfsk3'],comp_dict['dfsk4'],comp_dict['dfsk5'],comp_dict['dfsk6'],comp_dict['dfsk7'],
                           comp_dict['dfsk8'],comp_dict['dfsk9']
                           )

"""Так как полученное значение p-value < 0.05 (уровень значимости), то при уровне значимости 0.05 гипотеза Н0 отклоняется. Следовательно мы с большой уверенностью можем сказать что навыки из топ 10 имеют значительное влияние на заработную плату.

Выводы:

1. Подтвердили гипотезу 1. Гипотеза об неизменяемом уровне зарплаты с ростом опыта работы, отклонена для 3х групп, исключение составила зарплата в группе от 1 года до 3х лет, т.к. уровень опыта не сильно влияет на уровень зарплаты человека начинающего работать и имеющего опыт от одного года.

2. Коэффициент асиметрии имеет положительную асимметрию указывая на то, что хвост находится на правой стороне распределения, которая простирается в сторону более положительных значений.

   Коэффициент эксцесса показывает нам что, наша выборка означает имеет тенденцию к большим выбросам, чем нормальное распределение.

3. Подтвердили гипотезу 2. Проверели зависимость зарплаты от навыков, так как полученное значение p-value < 0.05 (уровень значимости), то при уровне значимости 0.05 гипотеза Н0 отклоняется. Следовательно мы с большой уверенностью можем сказать что навыки из топ 10 имеют значительное влияние на заработную плату.
"""